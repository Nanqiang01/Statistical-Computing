#Initialise Simplex
simplex<-matrix(c(1,1,2,
2,1,2),n,n+1,byrow = TRUE)
pdf('out/out00.pdf')
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1),ylim=c(-0.9,2.1))
polygon(t(simplex),lwd=4)
dev.off()
ymat
max(ymat)
min(ymat)
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1),ylim=c(-0.9,2.1))
g1<-301
g2<-301
gridx1<-seq(-0.9,2.1,length.out = g1)
gridx2<-seq(-0.9,2.1,length.out = g2)
gridx<-matrix(0,g1*g2,2)
count<-0
ymat<-matrix(0,g1,g2)
for (i in 1:g1){
for (j in 1:g2){
ymat[i,j]<-gridx1[i]^2+gridx2[j]^2+exp((gridx1[1]*gridx1[2]))
}
}
#Set Function
f<-function(x){x[1]^2+x[2]^2+exp(x[1]*x[2])}
#Set dimension
n<-2
#Set Parameters
alpha<-1 #Reflection
gamma<-2 #Expansion
rho<-0.5 #Contraction
sigma<-0.5 #Shrinkage
#Initialise Simplex
simplex<-matrix(c(1,1,2,
2,1,2),n,n+1,byrow = TRUE)
pdf('out/out00.pdf')
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1))
polygon(t(simplex),lwd=4)
dev.off()
max(ymat)
dev.off()
dev.off()
g1<-301
g2<-301
gridx1<-seq(-0.9,2.1,length.out = g1)
gridx2<-seq(-0.9,2.1,length.out = g2)
gridx<-matrix(0,g1*g2,2)
count<-0
ymat<-matrix(0,g1,g2)
for (i in 1:g1){
for (j in 1:g2){
ymat[i,j]<-gridx1[i]^2+gridx2[j]^2+exp((gridx1[1]*gridx1[2]))
}
}
#Set Function
f<-function(x){x[1]^2+x[2]^2+exp(x[1]*x[2])}
#Set dimension
n<-2
#Set Parameters
alpha<-1 #Reflection
gamma<-2 #Expansion
rho<-0.5 #Contraction
sigma<-0.5 #Shrinkage
#Initialise Simplex
simplex<-matrix(c(1,1,2,
2,1,2),n,n+1,byrow = TRUE)
pdf('out/out00.pdf')
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1))
polygon(t(simplex),lwd=4)
dev.off()
g1<-301
g2<-301
gridx1<-seq(-0.9,2.1,length.out = g1)
gridx2<-seq(-0.9,2.1,length.out = g2)
gridx<-matrix(0,g1*g2,2)
count<-0
ymat<-matrix(0,g1,g2)
for (i in 1:g1){
for (j in 1:g2){
ymat[i,j]<-gridx1[i]^2+gridx2[j]^2+exp((gridx1[i]*gridx2[j]))
}
}
#Set Function
f<-function(x){x[1]^2+x[2]^2+exp(x[1]*x[2])}
#Set dimension
n<-2
#Set Parameters
alpha<-1 #Reflection
gamma<-2 #Expansion
rho<-0.5 #Contraction
sigma<-0.5 #Shrinkage
#Initialise Simplex
simplex<-matrix(c(1,1,2,
2,1,2),n,n+1,byrow = TRUE)
pdf('out/out00.pdf')
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1),ylim<-c(-0.9,2.1))
polygon(t(simplex),lwd=4)
dev.off()
g1<-301
g2<-301
gridx1<-seq(-0.9,2.1,length.out = g1)
gridx2<-seq(-0.9,2.1,length.out = g2)
gridx<-matrix(0,g1*g2,2)
count<-0
ymat<-matrix(0,g1,g2)
for (i in 1:g1){
for (j in 1:g2){
ymat[i,j]<-gridx1[i]^2+gridx2[j]^2+exp(-(gridx1[i]*gridx2[j]))
}
}
#Set Function
f<-function(x){x[1]^2+x[2]^2+exp(-x[1]*x[2])}
#Set dimension
n<-2
#Set Parameters
alpha<-1 #Reflection
gamma<-2 #Expansion
rho<-0.5 #Contraction
sigma<-0.5 #Shrinkage
#Initialise Simplex
simplex<-matrix(c(1,1,2,
2,1,2),n,n+1,byrow = TRUE)
pdf('out/out00.pdf')
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1),ylim<-c(-0.9,2.1))
polygon(t(simplex),lwd=4)
dev.off()
g1<-301
g2<-301
gridx1<-seq(-0.9,2.1,length.out = g1)
gridx2<-seq(-0.9,2.1,length.out = g2)
gridx<-matrix(0,g1*g2,2)
count<-0
ymat<-matrix(0,g1,g2)
for (i in 1:g1){
for (j in 1:g2){
ymat[i,j]<-gridx1[i]^2+gridx2[j]^2+exp(-(gridx1[i]*(gridx1[i]+gridx2[j])))
}
}
#Set Function
f<-function(x){x[1]^2+x[2]^2+exp(-x[1]*(x[1]+x[2]))}
#Set dimension
n<-2
#Set Parameters
alpha<-1 #Reflection
gamma<-2 #Expansion
rho<-0.5 #Contraction
sigma<-0.5 #Shrinkage
#Initialise Simplex
simplex<-matrix(c(1,1,2,
2,1,2),n,n+1,byrow = TRUE)
pdf('out/out00.pdf')
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1),ylim<-c(-0.9,2.1))
polygon(t(simplex),lwd=4)
dev.off()
g1<-301
g2<-301
gridx1<-seq(-0.9,2.1,length.out = g1)
gridx2<-seq(-0.9,2.1,length.out = g2)
gridx<-matrix(0,g1*g2,2)
count<-0
ymat<-matrix(0,g1,g2)
for (i in 1:g1){
for (j in 1:g2){
ymat[i,j]<-gridx1[i]^2+gridx2[j]^2+3*exp(-gridx1[i]^2)+5*exp(-(gridx2[j]-1)^2)
}
}
#Set Function
f<-function(x){x[1]^2+x[2]^2+3*exp(-x[1]^2)+5*exp(-(x[2]-1)^2)}
#Set dimension
n<-2
#Set Parameters
alpha<-1 #Reflection
gamma<-2 #Expansion
rho<-0.5 #Contraction
sigma<-0.5 #Shrinkage
#Initialise Simplex
simplex<-matrix(c(1,1,2,
2,1,2),n,n+1,byrow = TRUE)
pdf('out/out00.pdf')
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1),ylim<-c(-0.9,2.1))
polygon(t(simplex),lwd=4)
dev.off()
ymat
max(ymat)
min(ymat)
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1),ylim<-c(-0.9,2.1))
g1<-301
g2<-301
gridx1<-seq(-0.9,2.1,length.out = g1)
gridx2<-seq(-0.9,2.1,length.out = g2)
gridx<-matrix(0,g1*g2,2)
count<-0
ymat<-matrix(0,g1,g2)
for (i in 1:g1){
for (j in 1:g2){
ymat[i,j]<-gridx1[i]^2+gridx2[j]^2+3*exp(-gridx1[i]^2)*exp(-(gridx2[j]-1)^2)
}
}
#Set Function
f<-function(x){x[1]^2+x[2]^2+3*exp(-x[1]^2)*exp(-(x[2]-1)^2)}
#Set dimension
n<-2
#Set Parameters
alpha<-1 #Reflection
gamma<-2 #Expansion
rho<-0.5 #Contraction
sigma<-0.5 #Shrinkage
#Initialise Simplex
simplex<-matrix(c(1,1,2,
2,1,2),n,n+1,byrow = TRUE)
pdf('out/out00.pdf')
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1),ylim<-c(-0.9,2.1))
polygon(t(simplex),lwd=4)
dev.off()
dev.off()
dev.off()
g1<-301
g2<-301
gridx1<-seq(-0.9,2.1,length.out = g1)
gridx2<-seq(-0.9,2.1,length.out = g2)
gridx<-matrix(0,g1*g2,2)
count<-0
ymat<-matrix(0,g1,g2)
for (i in 1:g1){
for (j in 1:g2){
ymat[i,j]<-gridx1[i]^2+gridx2[j]^2+3*exp(-gridx1[i]^2)*exp(-(gridx2[j]-1)^2)
}
}
#Set Function
f<-function(x){x[1]^2+x[2]^2+3*exp(-x[1]^2)*exp(-(x[2]-1)^2)}
#Set dimension
n<-2
#Set Parameters
alpha<-1 #Reflection
gamma<-2 #Expansion
rho<-0.5 #Contraction
sigma<-0.5 #Shrinkage
#Initialise Simplex
simplex<-matrix(c(1,1,2,
2,1,2),n,n+1,byrow = TRUE)
pdf('out/out00.pdf')
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1),ylim<-c(-0.9,2.1))
polygon(t(simplex),lwd=4)
dev.off()
dev.off()
g1<-301
g2<-301
gridx1<-seq(-0.9,2.1,length.out = g1)
gridx2<-seq(-0.9,2.1,length.out = g2)
gridx<-matrix(0,g1*g2,2)
count<-0
ymat<-matrix(0,g1,g2)
for (i in 1:g1){
for (j in 1:g2){
ymat[i,j]<-gridx1[i]^2+gridx2[j]^2+3*exp(-(gridx1[i]+1)^2)*exp(-(gridx2[j]+1)^2)
}
}
#Set Function
f<-function(x){x[1]^2+x[2]^2+3*exp(-(x[1]+1)^2)*exp(-(x[2]+1)^2)}
#Set dimension
n<-2
#Set Parameters
alpha<-1 #Reflection
gamma<-2 #Expansion
rho<-0.5 #Contraction
sigma<-0.5 #Shrinkage
#Initialise Simplex
simplex<-matrix(c(1,1,2,
2,1,2),n,n+1,byrow = TRUE)
pdf('out/out00.pdf')
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1),ylim<-c(-0.9,2.1))
polygon(t(simplex),lwd=4)
dev.off()
g1<-301
g2<-301
gridx1<-seq(-0.9,2.1,length.out = g1)
gridx2<-seq(-0.9,2.1,length.out = g2)
gridx<-matrix(0,g1*g2,2)
count<-0
ymat<-matrix(0,g1,g2)
for (i in 1:g1){
for (j in 1:g2){
ymat[i,j]<-gridx1[i]^2+gridx2[j]^2+3*exp(-(gridx1[i]+1)^2)*exp(-(gridx2[j]+1)^2)
}
}
#Set Function
f<-function(x){x[1]^2+x[2]^2+3*exp(-(x[1]+1)^2)*exp(-(x[2]+1)^2)}
#Set dimension
n<-2
#Set Parameters
alpha<-1 #Reflection
gamma<-2 #Expansion
rho<-0.5 #Contraction
sigma<-0.5 #Shrinkage
#Initialise Simplex
simplex<-matrix(c(-0.9,-1,-0.9,
-0.9,-1,-1),n,n+1,byrow = TRUE)
pdf('out/out00.pdf')
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1),ylim<-c(-0.9,2.1))
polygon(t(simplex),lwd=4)
dev.off()
g1<-301
g2<-301
gridx1<-seq(-0.9,2.1,length.out = g1)
gridx2<-seq(-0.9,2.1,length.out = g2)
gridx<-matrix(0,g1*g2,2)
count<-0
ymat<-matrix(0,g1,g2)
for (i in 1:g1){
for (j in 1:g2){
ymat[i,j]<-gridx1[i]^2+gridx2[j]^2+3*exp(-(gridx1[i]+1)^2)*exp(-(gridx2[j]+1)^2)
}
}
#Set Function
f<-function(x){x[1]^2+x[2]^2+3*exp(-(x[1]+1)^2)*exp(-(x[2]+1)^2)}
#Set dimension
n<-2
#Set Parameters
alpha<-1 #Reflection
gamma<-2 #Expansion
rho<-0.5 #Contraction
sigma<-0.5 #Shrinkage
#Initialise Simplex
simplex<-matrix(c(-0.4,-0.5,-0.4,
-0.4,-0.5,-0.5),n,n+1,byrow = TRUE)
pdf('out/out00.pdf')
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,2.1),ylim<-c(-0.9,2.1))
polygon(t(simplex),lwd=4)
dev.off()
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
warnings()
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim<-c(-0.9,1,5),ylim=c(-0.9,1.5))
dim(gridx1)
length(gridx1)
length(gridx2)
dim(ymat)
warning()
warnings()
max(ymat)
min(ymat)
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
gridx1
gridx2
gridx1
dev.off()
dev.off()
dev.off()
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim=c(-0.9,1,5),ylim=c(-0.9,1.5),zlim=c(0,5))
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim=c(-0.9,1,5),ylim=c(-0.9,1.5))
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim=c(-0.9,1.5),ylim=c(-0.9,1.5),zlim=c(0,10))
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
dev.off()
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim=c(-0.9,2.1),ylim=c(-0.9,2.1))
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
rm(list=ls())
dev.off()
dev.off()
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
dev.off()
max(ymat)
min(ymat)
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim=c(-0.9,2.1),ylim=c(-0.9,2.1),zlim = c(0,10))
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim=c(-0.9,2.1),ylim=c(-0.9,2.1),zlim = c(0,20))
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim=c(-0.9,2.1),ylim=c(-0.9,2.1),zlim = c(0,5))
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim=c(-0.9,2.1),ylim=c(-0.9,2.1),zlim = c(0,2))
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
image(gridx1,gridx2,ymat,main='Nelder-Mead',xlab=expression(x[1]),ylab=expression(x[2]),xlim=c(-0.9,1.5),ylim=c(-0.9,1.5),zlim = c(0,2))
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nmmovie.r', echo=TRUE)
A<-marix(c(1,2,3,4),2,2)
A<-matrix(c(1,2,3,4),2,2)
A
apply(A,1,sum)
apply(A,2,sum)
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nm.r', echo=TRUE)
source('~/Documents/CUFE/Lectures/Optimization/RCode/NM/nm.r', echo=TRUE)
rm(list=ls())
#Define Sphere Function
f<-function(x){x[1]^2+x[2]^2}
g<-function(x){c(2*x[1],2*x[2])}
#Use Nelder Mead and optim for trace
x0<-c(2,2)
onm<-optim(x0,f,control=list(trace=1,REPORT=1))
onm<-optim(x0,f)
onm$par
onm$value
onm$counts
onm$convergence
onm$message
boothg<-function(x){c(2*(x[1]+2*x[2]-7)+4*(2*x[1]+x[2]-5),
4*(x[1]+2*x[2]-7)+2*(2*x[1]+x[2]-5))}
x0<-c(0,0)
oboothnm<-optim(x0,boothnm) #Optimization by Nelder Mead
oboothqn<-optim(x0,booth,boothg,method="L-BFGS-B",lower=c(-10,-10),upper=c(10,10)) #Optimization by L-BFGS-B (Derivative Known)
rm(list=ls())
#Define Sphere Function
f<-function(x){x[1]^2+x[2]^2}
g<-function(x){c(2*x[1],2*x[2])}
#Use Nelder Mead and optim for trace
x0<-c(2,2)
onm<-optim(x0,f)
#Compare to BFGS
obfgs<-optim(x0,f,method="BFGS") #Optimization by BFGS
olbfgsb<-optim(x0,f,method="L-BFGS-B") #Optimization by L-BFGS-B
obfgsg<-optim(x0,f,g,method="BFGS") #Optimization by BFGS (Derivative Known)
olbfgsbg<-optim(x0,f,g,method="L-BFGS-B") #Optimization by L-BFGS-B (Derivative Known)
booth<-function(x){(x[1]+2*x[2]-7)^2+(2*x[1]+x[2]-5)^2}
boothnm<-function(x){
y<-(x[1]+2*x[2]-7)^2+(2*x[1]+x[2]-5)^2
if ((abs(x[1])>10)||(abs(x[2])>10)){y<-1E30}
return(y)
}
boothg<-function(x){c(2*(x[1]+2*x[2]-7)+4*(2*x[1]+x[2]-5),
4*(x[1]+2*x[2]-7)+2*(2*x[1]+x[2]-5))}
x0<-c(0,0)
oboothnm<-optim(x0,boothnm) #Optimization by Nelder Mead
oboothqn<-optim(x0,booth,boothg,method="L-BFGS-B",lower=c(-10,-10),upper=c(10,10)) #Optimization by L-BFGS-B (Derivative Known)
oboothnm$par
oboothqn$par
oboothqn$value
oboothnm$value
oboothnm$counts
oboothqn$counts
oboothqn<-optim(x0,booth,method="L-BFGS-B",lower=c(-10,-10),upper=c(10,10)) #Optimization by L-BFGS-B (Derivative Known)
oboothqn$par
oboothqn$value
oboothqn$counts
oboothqn$convergence
oboothnm$convergence
oboothnm$message
oboothqn$message
bukin<-function(x){100*sqrt(abs(x[2]-(x[1]^2/100)))+(abs(x[1]+10)/100)}
bukinnm<-function(x){
y<-100*sqrt(abs(x[2]-(x[1]^2/100)))+(abs(x[1]+10)/100)
if ((x[1]>5)||(x[1]<(-15))||(abs(x[2])>3)){y<-1E30}
return(y)
}
x0<-c(-5,2)
bukinnm(x0)
obukinnm<-optim(x0,bukinnm) #Optimization by Nelder Mead
obukinqn<-optim(x0,bukin,method="L-BFGS-B",lower=c(-15,-3),upper=c(5,3)) #Optimization by L-BFGS-B (Derivative Known)
oboothqn<-optim(x0,booth,method="L-BFGS-B",lower=c(-10,-10),upper=c(10,10)) #Optimization by L-BFGS-B (Derivative Known)
bukin$par
obukin$par
obukinnm$par
obukinqn$par
obukinqn$value
obukinnm$value
obukinnm$convergence
obukinqn$convergence
x0<-c(-10,1)
oboothnm<-optim(x0,boothnm) #Optimization by Nelder Mead
oboothqn<-optim(x0,booth,method="L-BFGS-B",lower=c(-10,-10),upper=c(10,10)) #Optimization by L-BFGS-B (Derivative Known)
bukin<-function(x){100*sqrt(abs(x[2]-(x[1]^2/100)))+(abs(x[1]+10)/100)}
bukinnm<-function(x){
y<-100*sqrt(abs(x[2]-(x[1]^2/100)))+(abs(x[1]+10)/100)
if ((x[1]>5)||(x[1]<(-15))||(abs(x[2])>3)){y<-1E30}
return(y)
}
x0<-c(-10,1)
bukinnm(x0)
obukinnm<-optim(x0,bukinnm) #Optimization by Nelder Mead
obukinqn<-optim(x0,bukin,method="L-BFGS-B",lower=c(-15,-3),upper=c(5,3)) #Optimization by L-BFGS-B (Derivative Known)
obukinnm$par
obukinqn$par
x0<-c(-9,5,1.5)
bukinnm(x0)
obukinnm<-optim(x0,bukinnm) #Optimization by Nelder Mead
obukinqn<-optim(x0,bukin,method="L-BFGS-B",lower=c(-15,-3),upper=c(5,3)) #Optimization by L-BFGS-B (Derivative Known)
obukinnm$par
bukin<-function(x){100*sqrt(abs(x[2]-(x[1]^2/100)))+(abs(x[1]+10)/100)}
bukinnm<-function(x){
y<-100*sqrt(abs(x[2]-(x[1]^2/100)))+(abs(x[1]+10)/100)
if ((x[1]>5)||(x[1]<(-15))||(abs(x[2])>3)){y<-1E30}
return(y)
}
x0<-c(-9,5,1.5)
obukinnm<-optim(x0,bukinnm) #Optimization by Nelder Mead
obukinqn<-optim(x0,bukin,method="L-BFGS-B",lower=c(-15,-3),upper=c(5,3)) #Optimization by L-BFGS-B (Derivative Known)
obukinnm$par
obukinqn$par
x0<-c(-9.5,1.5)
obukinnm<-optim(x0,bukinnm) #Optimization by Nelder Mead
obukinqn<-optim(x0,bukin,method="L-BFGS-B",lower=c(-15,-3),upper=c(5,3)) #Optimization by L-BFGS-B (Derivative Known)
obukinnm
obukinnm$par
obukinqn$par
obukinnm$value
obukinqn$value
rm(list=ls())
#Define Sphere Function
f<-function(x){x[1]^2+x[2]^2}
g<-function(x){c(2*x[1],2*x[2])}
#Use Nelder Mead and optim for trace
x0<-c(2,2)
onm<-optim(x0,f)
#Compare to BFGS
obfgs<-optim(x0,f,method="BFGS") #Optimization by BFGS
olbfgsb<-optim(x0,f,method="L-BFGS-B") #Optimization by L-BFGS-B
obfgsg<-optim(x0,f,g,method="BFGS") #Optimization by BFGS (Derivative Known)
olbfgsbg<-optim(x0,f,g,method="L-BFGS-B") #Optimization by L-BFGS-B (Derivative Known)
onm$counts
obfgs$counts
olbfgsb$counts
obfgsg$counts
olbfgsbg$counts
